import schedule
import time
import datetime
import telebot
import threading
from telebot import types
from dict_id_chats import user_dict
from info_pets import info_dog, info_cat, info_panda, food_meet, food_green, food_all
from pet import Pet
from life import feed_pet, walk_pet, wash_pet, check_heel


bot = telebot.TeleBot('6202651990:AAEsQjIPBDqsMOx5wMjdFYEH44kMumWFMsU')


@bot.message_handler(commands=['start'])
def hello(message):
    tip_pitomca = types.InlineKeyboardMarkup()
    dog = types.InlineKeyboardButton('üê∂', callback_data='dog')
    cat = types.InlineKeyboardButton('üê±', callback_data='cat')
    panda = types.InlineKeyboardButton('üêº', callback_data='panda')
    tip_pitomca.add(dog, cat, panda)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ç–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!', reply_markup=tip_pitomca)



@bot.callback_query_handler(func=lambda call: call.data == 'dog')
def dog(call):
    prove = types.InlineKeyboardMarkup()
    button_prove = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='prove_dog')
    button_exit = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='exit')
    prove.add(button_prove, button_exit)
    bot.send_message(call.from_user.id, 'üê∂ –ì–∞–≤-–ì–∞–≤')
    bot.send_message(call.from_user.id, f'{info_dog}', reply_markup=prove)


@bot.callback_query_handler(func=lambda call: call.data == 'cat')
def cat(call):
    prove = types.InlineKeyboardMarkup()
    button_prove = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='prove_cat')
    button_exit = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='exit')
    prove.add(button_prove, button_exit)
    bot.send_message(call.from_user.id, 'üê± –ú—è—É –ú—è—É')
    bot.send_message(call.from_user.id, f'{info_cat}', reply_markup=prove)


@bot.callback_query_handler(func=lambda call: call.data == 'panda')
def panda(call):
    prove = types.InlineKeyboardMarkup()
    button_prove = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='prove_panda')
    button_exit = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data='exit')
    prove.add(button_prove, button_exit)
    bot.send_message(call.from_user.id, 'üêº –ù–≥—è–Ω—å–≥—å')
    bot.send_message(call.from_user.id, f'{info_panda}', reply_markup=prove)



@bot.callback_query_handler(func=lambda call: call.data == 'exit')
def exit(call):
    bot.delete_message(call.from_user.id, call.message.message_id)
    bot.delete_message(call.from_user.id, call.message.message_id - 1)


@bot.callback_query_handler(func=lambda call: call.data == 'prove_dog')
def prove_dog(call):
    bot.send_message(call.from_user.id, '–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å üê∂ –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –µ–º—É –∏–º—è –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ!')
    bot.register_next_step_handler(call.message, named_pet)
    global pet_tipe
    pet_tipe = 'üê∂'


@bot.callback_query_handler(func=lambda call: call.data == 'prove_cat')
def prove_cat(call):
    bot.send_message(call.from_user.id, '–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å üê± –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –µ–º—É –∏–º—è –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ!')
    bot.register_next_step_handler(call.message, named_pet)
    global pet_tipe
    pet_tipe = 'üê±'


@bot.callback_query_handler(func=lambda call: call.data == 'prove_panda')
def prove_panda(call):
    bot.send_message(call.from_user.id, '–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å üêº –≤–∞—à –ø–∏—Ç–æ–º–µ—Ü! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –µ–º—É –∏–º—è –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ!')
    bot.register_next_step_handler(call.message, named_pet)
    global pet_tipe
    pet_tipe = 'üêº'


def named_pet(message):
    pet_name = message.text
    bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, {pet_name} - —Ö–æ—Ä–æ—à–µ–µ –∏–º—è –¥–ª—è {pet_tipe}!')
    moy_pet = Pet(message.chat.id, pet_tipe, True, 10, 10, pet_name, False, False, False, time.time())
    user_dict[message.chat.id] = moy_pet
    print(user_dict)
    if len(user_dict) == 1:
        start_check()



def check():
    def check_potok(key, pet):
        if pet.life_status['life_status'] == True and pet.life_status['message'] == False:
            if pet.need_food['need_food'] == True and pet.need_food['message'] == False:
                bot.send_message(key, f'–ü–∏—Ç–æ–º–µ—Ü –≥–æ–ª–æ–¥–µ–Ω!')
                pet.need_food['message'] = True
            if pet.need_walk['need_walk'] == True and pet.need_walk['message'] == False:
                bot.send_message(key, f'–ü–∏—Ç–æ–º–µ—Ü —Ö–æ—á–µ—Ç –Ω–∞ —É–ª–∏—Ü—É!')
                pet.need_walk['message'] = True
            if pet.need_wash['need_wash'] == True and pet.need_wash['message'] == False:
                bot.send_message(key, f'–ü–∏—Ç–æ–º—Ü–∞ –ø–æ—Ä–∞ –ø–æ–º—ã—Ç—å!')
                pet.need_wash['message'] = True
        elif pet.life_status['life_status'] == False and pet.life_status['message'] == False:
            time_diff = datetime.timedelta(seconds=time.time() - pet.time)
            days, seconds = time_diff.days, time_diff.seconds
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60

            message_text = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"
            bot.send_message(key, f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –ø–æ–≥–∏–±! –û–Ω –±—ã–ª —Å –≤–∞–º–∏ —Ç–∞–∫ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –≤–∞—à–µ–º —Å–µ—Ä–¥—Ü–µ –Ω–∞–≤—Å–µ–≥–¥–∞.\n'
                                  f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü –±—ã–ª —Å –≤–∞–º–∏:\n'
                                  f'{message_text}')
            pet.life_status['message'] = True

    for key, pet in user_dict.items():
        print(key)
        potok = threading.Thread(target=check_potok, args=(key, pet,))
        potok.start()


schedule.every(5).minutes.do(check)
schedule.every(61).minutes.do(feed_pet)
schedule.every(92).minutes.do(walk_pet)
schedule.every(119).minutes.do(wash_pet)
schedule.every().day.at('10:00').do(check_heel)


def start_check():
    while 1:
        schedule.run_pending()
        time.sleep(1)



@bot.message_handler(commands=['help'])
def info(message):
    bot.send_message(message.chat.id, f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ: \n'
                                      f'1. /start - –ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ \n'
                                      f'2. /info - –í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–∏—Ç–æ–º—Ü–µ')


@bot.message_handler(commands=['keel'])
def info(message):
    if message.chat.id not in user_dict:
        bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞( \n'
                                          '–î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º, –∂–º–∏—Ç–µ /start !')
    else:
        bot.send_message(message.chat.id, f'–í—ã –±–µ—Å—á–µ–ª–æ–≤–µ—á–Ω–æ —É–±–∏–ª–∏ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –ß–µ–º –∂–µ {user_dict[message.chat.id].name} –∑–∞—Å–ª—É–∂–∏–ª(–ª–∞) —Ç–∞–∫–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è? –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏—á–µ–≥–æ —Å–≤—è—Ç–æ–≥–æ. –£–¥–∞–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –Ω–∏–∫–æ–≥–¥–∞ —Å—é–¥–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å')
        user_dict[message.chat.id].hp = 0
        user_dict[message.chat.id].life_status['life_status'] = False
        check()


@bot.message_handler(commands=['info'])
def info(message):
    if message.chat.id not in user_dict:
        bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞( \n'
                                          '–î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º, –∂–º–∏—Ç–µ /start !')
    else:
        time_diff = datetime.timedelta(seconds=time.time() - user_dict[message.chat.id].time)
        days, seconds = time_diff.days, time_diff.seconds
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60

        message_text = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"

        bot.send_message(message.chat.id, f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü - {user_dict[message.chat.id].tipe}\n'
                                          f'–ò–º—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ - {user_dict[message.chat.id].name}\n'
                                          f'–ó–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ - {user_dict[message.chat.id].hp} –∏–∑ 10!\n'
                                          f'–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å –≤–∞–º–∏ —É–∂–µ:\n'
                                          f'{message_text}')


@bot.message_handler()
def message(message):
    print(message)
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–ø—Ä–∏–≤')
        print('–µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
    if message.text.lower() == '–≥—É–ª—è—é':
        user_dict[message.chat.id].got_walk()
        bot.send_message(message.chat.id, '–ø–∏—Ç–æ–º–µ—Ü –ø–æ–≥—É–ª—è–ª')
    if message.text.lower() == '–º–æ—é':
        user_dict[message.chat.id].got_wash()
        bot.send_message(message.chat.id, '–ø–∏—Ç–æ–º–µ—Ü –ø–æ–º—ã—Ç')

    for i in message.text:
        if i in food_all:
            if user_dict[message.chat.id].tipe == 'üê∂':
                if i in food_meet:
                    user_dict[message.chat.id].got_food()
                    bot.send_message(message.chat.id, f'–ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! {user_dict[message.chat.id].name} –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç {i}')
                else:
                    bot.send_message(message.chat.id, f'{i} - —ç—Ç–∞ –µ–¥–∞ {user_dict[message.chat.id].name} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–µ –¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–æ–µ –≤–∞—à–µ–º—É –ø–∏—Ç–æ–º—Ü—É.')

            if user_dict[message.chat.id].tipe == 'üê±':
                if i in food_meet:
                    user_dict[message.chat.id].got_food()
                    bot.send_message(message.chat.id, f'–ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! {user_dict[message.chat.id].name} –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç {i}')
                else:
                    bot.send_message(message.chat.id, f'{i} - —ç—Ç–∞ –µ–¥–∞ {user_dict[message.chat.id].name} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–µ –¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–æ–µ –≤–∞—à–µ–º—É –ø–∏—Ç–æ–º—Ü—É.')

            if user_dict[message.chat.id].tipe == 'üêº':
                if i in food_green:
                    user_dict[message.chat.id].got_food()
                    bot.send_message(message.chat.id,
                                     f'–ü–∏—Ç–æ–º–µ—Ü –ø–æ–∫–æ—Ä–º–ª–µ–Ω! {user_dict[message.chat.id].name} –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç {i}')
                else:
                    bot.send_message(message.chat.id,
                                     f'{i} - —ç—Ç–∞ –µ–¥–∞ {user_dict[message.chat.id].name} –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, –Ω–µ –¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —Ç–∞–∫–æ–µ –≤–∞—à–µ–º—É –ø–∏—Ç–æ–º—Ü—É.')




bot.polling(none_stop=True)